colnames(company_base_info) <- c("company_nm","okpo","okopf","okfs","okved","inn")
View(company)
View(company_base_info)
dbDisconnect(conn)
#Set connection to our database
conn <- dbConnect(drv = SQLite(), dbname= myDB)
dbWriteTable(conn,"company_base_info",company_base_info)
dbWriteTable(conn,"company_base_info",company_base_info, append = TRUE)
View(company)
View(company_base_info)
View(company_base_info)
#рассматриваются дома БЕЗ подземного паркинга
#1й этаж считается начальным и вход в подъезд расположен на этом этаже
#количество этажей
n <- 9
#количество лифтов
z <- 3
lifts <- c(1:z)
house <- as.data.frame(matrix (" ",n,z+1))
View(house)
colnames(house) <- c('floor',paste(c('lift'),c(lifts)))
View(house)
View(house)
View(house)
house$floor <- c(n:1)
View(house)
View(house)
point1 <- min(house$floor)
point2 <- mean(house$floor)
point3 <- max(house$floor)
house$floor <- paste(n:1,'этаж')
View(house)
house[point1,'lift1'] <- "[]"
house[point2,'lift2'] <- "[]"
house[point3,'lift3'] <- "[]"
View(house)
#статус ключевой точки
if lift <> point then FREE
library(foreign)
tnved <- read.dbf("C:/Users/dsele/Downloads/THBED.dbf", as.is = T)
tnved$KOD <- iconv(tnved$KOD, from="CP866", to="CP1251")
tnved$SIMPLE_NAM <- iconv(tnved$SIMPLE_NAM, from="CP866", to="CP1251")
write.table(x = tnved, file = 'tnved.csv', sep = '\t', row.names = F)
View(tnved)
myDB <- "C:/Users/dsele/Projects/company_db_3/company.db"
conn <- dbConnect(drv = SQLite(), dbname= myDB)
tnved = data.frame(classifier_type_cd = character(),
product_cd = tnved$KOD,
product_desc = tnved$SIMPLE_NAM,
stringsAsFactors = F)
tnved = data.frame(classifier_type_cd = 'qq',
product_cd = tnved$KOD,
product_desc = tnved$SIMPLE_NAM,
stringsAsFactors = F)
tnved = data.frame(classifier_type_cd = 'dummy',
product_cd = tnved$KOD,
product_desc = tnved$SIMPLE_NAM,
stringsAsFactors = F)
library(foreign)
library(RSQLite)
tnved <- read.dbf("C:/Users/dsele/Downloads/THBED.dbf", as.is = T)
tnved$KOD <- iconv(tnved$KOD, from="CP866", to="CP1251")
tnved$SIMPLE_NAM <- iconv(tnved$SIMPLE_NAM, from="CP866", to="CP1251")
tnved_db = data.frame(classifier_type_cd = 'dummy',
product_cd = tnved$KOD,
product_desc = tnved$SIMPLE_NAM,
stringsAsFactors = F)
View(tnved_db)
tnved_db = data.frame(classifier_type_cd = 'TNVED_EURASIAN_ECONOMIC_UNION',
product_cd = tnved$KOD,
product_desc = tnved$SIMPLE_NAM,
stringsAsFactors = F)
myDB <- "C:/Users/dsele/Projects/company_db_3/company.db"
conn <- dbConnect(drv = SQLite(), dbname= myDB)
dbWriteTable(conn, "mref_product_classifier", tnved_db, append = TRUE)
tnved <- read.dbf("C:/Users/dsele/Downloads/THBED.dbf", as.is = T)
tnved$KOD <- iconv(tnved$KOD, from="CP866", to="CP1251")
tnved$SIMPLE_NAM <- iconv(tnved$SIMPLE_NAM, from="CP866", to="CP1251")
tnved_db = data.frame(classifier_type_cd = 'TNVED_EAES',
product_cd = tnved$KOD,
product_desc = tnved$SIMPLE_NAM,
stringsAsFactors = F)
myDB <- "C:/Users/dsele/Projects/company_db_3/company.db"
conn <- dbConnect(drv = SQLite(), dbname= myDB)
dbWriteTable(conn, "mref_product_classifier", tnved_db, append = TRUE)
library(foreign)
library(RSQLite)
library(foreign)
library(RSQLite)
tnved <- read.dbf("C:/Users/dsele/Downloads/THBED.dbf", as.is = T)
tnved$KOD <- iconv(tnved$KOD, from="CP866", to="CP1251")
tnved$SIMPLE_NAM <- iconv(tnved$SIMPLE_NAM, from="CP866", to="CP1251")
tnved_db = data.frame(classifier_type_cd = 'TNVED_EAES',
product_cd = tnved$KOD,
product_desc_ru = tnved$SIMPLE_NAM,
stringsAsFactors = F)
myDB <- "C:/Users/dsele/Projects/Global-cargo-tracker/src/global-cargo-tracker/company.db"
conn <- dbConnect(drv = SQLite(), dbname= myDB)
View(tnved_db)
dbWriteTable(conn, "mref_product_classifier", tnved_db, append = TRUE)
?read.csv
remove.packages("rlang", lib="~/R/win-library/4.0")
install.packages("rlang")
install.packages("ggplot2")
remove.packages("rlang", lib="~/R/win-library/4.0")
remove.packages("ggplot2", lib="~/R/win-library/4.0")
install.packages("Rtools")
install.packages("rlang")
install.packages("ggplot2")
install.packages("plotly")
library(plotly)
remove.packages("vctrs", lib="~/R/win-library/4.0")
install.packages("vctrs")
install.packages("vctrs")
library(plotly)
library(gapminder)
df <- gapminder
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers'
)
fig <- fig %>% layout(
xaxis = list(
type = "log"
)
)
fig
fig
df <- gapminder
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
z = ~year
#    size = ~pop,
#    color = ~continent,
#    frame = ~year,
#    text = ~country,
hoverinfo = "text",
type = 'surface'
#    mode = 'markers'
)
df <- gapminder
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
z = ~year,
#    size = ~pop,
#    color = ~continent,
#    frame = ~year,
#    text = ~country,
hoverinfo = "text",
type = 'surface'
#    mode = 'markers'
)
fig <- fig %>% layout(
xaxis = list(
type = "log"
)
)
fig
df <- gapminder
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
z = ~year,
#    size = ~pop,
color = ~continent,
#    frame = ~year,
#    text = ~country,
hoverinfo = "text",
type = 'surface'
#    mode = 'markers'
)
fig <- fig %>% layout(
xaxis = list(
type = "log"
)
)
fig
library(plotly)
df.list <- list(x = 1:100,
y = 500:599,
z = matrix(rnorm(10000), nrow = 100))
df.dataframe <- data.frame(x = 1:100,
y = 500:599,
z = sample(1:200, size = 100))
# Works fine
plot_ly(df.list, x = x, y = y, z = z, type = "surface")
# Doesn't work
# dimension of the z parameter != dim(x) x dim(y)
plot_ly(df.dataframe, x = x, y = y, z = z, type = "surface")
df <- data.frame(x = 1:100,
y = 500:599,
z = sample(1:200, size = 100))
# Doesn't work
# dimension of the z parameter != dim(x) x dim(y)
plot_ly(df, x = ~x, y = ~y, z = ~z, type = "surface")
gc()
A = as.matrix(data.frame(c(4,7,-1,8), c(-5,-2,4,2), c(-1,3,-3,6)))
A
View(A)
A.svd <- svd(A)
A.svd
A = matrix(1,1,1,1,1,1,1,1,1)
A = matrix(c(1,1,1,1,1,1,1,1,1))
A
A = matrix(c(1,1,1,1,1,1,1,1,1), nrow = 3)
A.svd <- svd(A)
A.svd
sample(x = 1:100, size = 100)
A = matrix(sample(1:100), nrow = 10)
A
A.svd <- svd(A)
A.svd
A = matrix(sample(1:1000), nrow = 100)
A
A.svd <- svd(A)
A.svd
A = matrix(sample(1:100), nrow = 10)
A
A.svd <- svd(A)
A.svd
A = matrix(sample(1:100), nrow = 5)
A
A.svd <- svd(A)
A.svd
A = matrix(1,2,5,0)
A
A = matrix(c(1,2,5,0))
A
A = matrix(c(1,2,5,0), nrow  = 2)
A
A = matrix(c(1,2,5,0), nrow  = 2, byrow = T)
A
A = matrix(c(1,0,2,5), nrow  = 2, byrow = T)
A
A.svd <- svd(A)
A.svd
A.svd$d*A.svd*A.svd$v
A.svd$d*A.svd
A = matrix(sample(1:100), nrow = 5)
A = matrix(c(1,0,2,5), nrow  = 2, byrow = T)
A
A.svd <- svd(A)
A.svd
A = matrix(c(0.96,1.72,2.28,0.96), nrow  = 2, byrow = T)
A
A.svd <- svd(A)
A.svd
A = matrix(c(0.96,1.72,2.28,0.96), nrow  = 2, byrow = T)
A
t(A)
library(plotly)
library(gapminder)
df <- gapminder
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
size = ~pop,
color = ~continent,
frame = ~year,
text = ~country,
hoverinfo = "text",
type = 'scatter',
mode = 'markers'
)
fig <- fig %>% layout(
xaxis = list(
type = "log"
)
)
fig
res = read_excel('country_mapping.xlsx', sheet = 'Result')
cntr = read.table('mref_country.csv', sep = ',')
map = sqldf('
select
period,
c.v12 cont1,
c2.v12 cont2,
reporter,
coalesce(sum(case when flow = "Import" then VAL end),0) import_val,
coalesce(sum(case when flow = "Export" then VAL end),0) export_val
from res r
left join cntr c
on r.reporter = c.v9
left join cntr c2
on map_name = c2.v9
where
r.reporter in ("Germany", "Russian Federation")
and period in (2018,2019)
group by period, c.v13, c2.v13, reporter
')
setwd("C:/Users/dsele/Projects/mfti/physics")
library(readxl)
library(sqldf)
library(plotly)
res = read_excel('country_mapping.xlsx', sheet = 'Result')
cntr = read.table('mref_country.csv', sep = ',')
map = sqldf('
select
period,
c.v12 cont1,
c2.v12 cont2,
reporter,
coalesce(sum(case when flow = "Import" then VAL end),0) import_val,
coalesce(sum(case when flow = "Export" then VAL end),0) export_val
from res r
left join cntr c
on r.reporter = c.v9
left join cntr c2
on map_name = c2.v9
where
r.reporter in ("Germany", "Russian Federation")
and period in (2018,2019)
group by period, c.v13, c2.v13, reporter
')
map$world_part = ifelse(is.na(map$cont1), map$cont2, map$cont1)
write.csv(map, 'map.csv', row.names = F, col.names = T)
map = sqldf('
select
period,
c.v12 cont1,
c2.v12 cont2,
reporter,
coalesce(sum(case when flow = "Import" then VAL end),0) import_val,
coalesce(sum(case when flow = "Export" then VAL end),0) export_val
from res r
left join cntr c
on r.reporter = c.v9
left join cntr c2
on map_name = c2.v9
where
--r.reporter in ("Germany", "Russian Federation")
--and period in (2018,2019)
group by period, c.v13, c2.v13, reporter
')
map$world_part = ifelse(is.na(map$cont1), map$cont2, map$cont1)
map = sqldf('
select
period,
c.v12 cont1,
c2.v12 cont2,
reporter,
coalesce(sum(case when flow = "Import" then VAL end),0) import_val,
coalesce(sum(case when flow = "Export" then VAL end),0) export_val
from res r
left join cntr c
on r.reporter = c.v9
left join cntr c2
on map_name = c2.v9
where
--r.reporter in ("Germany", "Russian Federation")
--and period in (2018,2019)
group by period, c.v13, c2.v13, reporter
')
map = sqldf('
select
period,
c.v12 cont1,
c2.v12 cont2,
reporter,
coalesce(sum(case when flow = "Import" then VAL end),0) import_val,
coalesce(sum(case when flow = "Export" then VAL end),0) export_val
from res r
left join cntr c
on r.reporter = c.v9
left join cntr c2
on map_name = c2.v9
-- where
--r.reporter in ("Germany", "Russian Federation")
--and period in (2018,2019)
group by period, c.v13, c2.v13, reporter
')
map$world_part = ifelse(is.na(map$cont1), map$cont2, map$cont1)
write.csv(map, 'map.csv', row.names = F, col.names = T)
install.packages("bReeze")
library(bReeze)
## Not run:
# load example data
data("winddata", package="bReeze")
View(winddata)
# create two datasets
set40 <- set(height=40, v.avg=winddata[,2], v.std=winddata[,5],
dir.avg=winddata[,14])
set30 <- set(height=30, v.avg=winddata[,6], v.std=winddata[,9],
dir.avg=winddata[,16])
View(set30)
set30[["data"]]
# format time stamp
ts <- timestamp(timestamp=winddata[,1])
View(ts)
ts[[1]][[1]][[1]][[1]]
# create met mast object
metmast <- mast(timestamp=ts, set40=set40, set30=set30)
View(metmast)
# plot time series of met mast signals
plot(metmast)
# calculate frequency and mean wind speed per wind direction sector
freq <- frequency(mast=metmast, v.set=1)
# plot frequency
plot(freq)
# calculate availability of pairs of wind speed and direction
availability(mast=metmast)
# calculate monthly means of wind speed
month.stats(mast=metmast)
# calculate turbulence intensity
turbulence(mast=metmast, turb.set=1)
# calculate weibull parameters
wb <- weibull(mast=metmast, v.set=1)
# calculate total wind energy content
energy(wb=wb)
# calculate wind profile
pf <- windprofile(mast=metmast, v.set=c(1,2), dir.set=1)
4 aep
# import power curve
pc <- pc("Enercon_E126_7.5MW.pow")
# calculate annual energy production
aep <- aep(profile=pf, pc=pc, hub.h=135)
# plot AEP
plot(aep)
# plot AEP
plot(aep)
## End(Not run)
aep Cal
install.packages("WindCurves")
library(WindCurves)
data(pcurves)
force(pcurves)
plot(pcurves)
plot(pcurves[,c('Speed','Nordex N90'])
plot(pcurves[,c('Speed','Nordex N90')])
plot(pcurves[,c('Nordex N90', 'Speed')])
plot(pcurves[,c('Speed','Nordex N90')])
s <- pcurves$Speed
p <- pcurves$`Nordex N90`
da <- data.frame(s,p)
x <- fitcurve(da)
#>
#>    Logistic Function model
#>    -----------------------
#>    P = phi1/(1+exp((phi2-S)/phi3))
#>    where P -> Power and S -> Speed
#>
#>     phi 1 = 2318.242
#>     phi 2 = 8.65861
#>     phi 3 = 1.366053
#>    ===================================
x
#>  [7]  530.79720  884.98933 1303.20985 1686.50765 1964.36723 2133.40810
#> [13] 2225.51236 2272.70005 2296.11389 2307.54694 2313.08606 2315.75946
#> [19] 2317.04738 2317.66729 2317.96554 2318.10900 2318.17801 2318.21119
#> [25] 2318.22715
#>
#> attr(,"row.names")
#>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
#> [24] 24 25
#> attr(,"class")
#> [1] "fitcurve"
validate.curve(x)
#>   Metrics Weibull CDF Logistic Function
#> 1    RMSE  30.8761687        38.8753476
#> 2     MAE  15.1381094        29.3213484
#> 3    MAPE   3.9292946         5.9183795
#> 4      R2   0.9989322         0.9983073
#> 5     COR   0.9995413         0.9991591
plot(x)
View(pcurves)
require(xtractomatic)
install.packages(c("gganimate", "oce", "sf", "tidyverse"))
require(xtractomatic)
install.packages("xtractomatic")
install.package("rWind")
library(rWind)
install.packages("rWind")
install.packages("fields")
install.packages("shape")
install.packages("rworldmap")
install.packages("lubridate")
library(rWind)
library(fields)
library(shape)
install.packages("weatherr")
install.packages("weathercan")
library(weathercan)
stations_search(coords = c(55.654146, 37.269982))
install.packages("rwunderground")
install.packages("rwunderground")
library(rwunderground)
set_location(lat_long = "50,-100")
history(set_location(lat_long = "50,-100"), date = 20150131)
library("devtools")
install_github("Ram-N/weatherData")
install.packages('weatherData')
install.packages("devtools")
install.packages("devtools")
library("devtools")
install_github("Ram-N/weatherData")
install_github("Ram-N/weatherData")
install.packages("Rcpp")
library(Rcpp)
