fig
df <- gapminder
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
z = ~year
#    size = ~pop,
#    color = ~continent,
#    frame = ~year,
#    text = ~country,
hoverinfo = "text",
type = 'surface'
#    mode = 'markers'
)
df <- gapminder
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
z = ~year,
#    size = ~pop,
#    color = ~continent,
#    frame = ~year,
#    text = ~country,
hoverinfo = "text",
type = 'surface'
#    mode = 'markers'
)
fig <- fig %>% layout(
xaxis = list(
type = "log"
)
)
fig
df <- gapminder
fig <- df %>%
plot_ly(
x = ~gdpPercap,
y = ~lifeExp,
z = ~year,
#    size = ~pop,
color = ~continent,
#    frame = ~year,
#    text = ~country,
hoverinfo = "text",
type = 'surface'
#    mode = 'markers'
)
fig <- fig %>% layout(
xaxis = list(
type = "log"
)
)
fig
library(plotly)
df.list <- list(x = 1:100,
y = 500:599,
z = matrix(rnorm(10000), nrow = 100))
df.dataframe <- data.frame(x = 1:100,
y = 500:599,
z = sample(1:200, size = 100))
# Works fine
plot_ly(df.list, x = x, y = y, z = z, type = "surface")
# Doesn't work
# dimension of the z parameter != dim(x) x dim(y)
plot_ly(df.dataframe, x = x, y = y, z = z, type = "surface")
df <- data.frame(x = 1:100,
y = 500:599,
z = sample(1:200, size = 100))
# Doesn't work
# dimension of the z parameter != dim(x) x dim(y)
plot_ly(df, x = ~x, y = ~y, z = ~z, type = "surface")
gc()
A = as.matrix(data.frame(c(4,7,-1,8), c(-5,-2,4,2), c(-1,3,-3,6)))
A
View(A)
A.svd <- svd(A)
A.svd
A = matrix(1,1,1,1,1,1,1,1,1)
A = matrix(c(1,1,1,1,1,1,1,1,1))
A
A = matrix(c(1,1,1,1,1,1,1,1,1), nrow = 3)
A.svd <- svd(A)
A.svd
sample(x = 1:100, size = 100)
A = matrix(sample(1:100), nrow = 10)
A
A.svd <- svd(A)
A.svd
A = matrix(sample(1:1000), nrow = 100)
A
A.svd <- svd(A)
A.svd
A = matrix(sample(1:100), nrow = 10)
A
A.svd <- svd(A)
A.svd
A = matrix(sample(1:100), nrow = 5)
A
A.svd <- svd(A)
A.svd
A = matrix(1,2,5,0)
A
A = matrix(c(1,2,5,0))
A
A = matrix(c(1,2,5,0), nrow  = 2)
A
A = matrix(c(1,2,5,0), nrow  = 2, byrow = T)
A
A = matrix(c(1,0,2,5), nrow  = 2, byrow = T)
A
A.svd <- svd(A)
A.svd
A.svd$d*A.svd*A.svd$v
A.svd$d*A.svd
A = matrix(sample(1:100), nrow = 5)
A = matrix(c(1,0,2,5), nrow  = 2, byrow = T)
A
A.svd <- svd(A)
A.svd
A = matrix(c(0.96,1.72,2.28,0.96), nrow  = 2, byrow = T)
A
A.svd <- svd(A)
A.svd
A = matrix(c(0.96,1.72,2.28,0.96), nrow  = 2, byrow = T)
A
t(A)
library(lubridate)
library(rWind)
library(wind)
library(ggplot2)
library(RColorBrewer)
library(lubridate)
library(rWind)
#library(wind)
library(ggplot2)
library(RColorBrewer)
dt <- seq(ymd_hms(paste(2020,10,1,00,00,00, sep="-")),
ymd_hms(paste(2020,12,21,21,00,00, sep="-")),by="24 hours")
ww <- wind.dl_2(dt,58,59,28,29)
tidy (ww)
wind.data <- tidy (ww)
View(wind.data)
wind2raster(wind.data)
# Построение розы ветров
plot.windrose <- function(data,
spd,
dir,
spdres = 2,
dirres = 30,
spdmin = 2,
spdmax = 20,
spdseq = NULL,
palette = "YlGnBu",
countmax = NA,
debug = 0){
# Look to see what data was passed in to the function
if (is.numeric(spd) & is.numeric(dir)){
# assume that we've been given vectors of the speed and direction vectors
data <- data.frame(spd = spd,
dir = dir)
spd = "spd"
dir = "dir"
} else if (exists("data")){
# Assume that we've been given a data frame, and the name of the speed
# and direction columns. This is the format we want for later use.
}
# Tidy up input data ----
n.in <- NROW(data)
dnu <- (is.na(data[[spd]]) | is.na(data[[dir]]))
data[[spd]][dnu] <- NA
data[[dir]][dnu] <- NA
# figure out the wind speed bins ----
if (missing(spdseq)){
spdseq <- seq(spdmin,spdmax,spdres)
} else {
if (debug >0){
cat("Using custom speed bins \n")
}
}
# get some information about the number of bins, etc.
n.spd.seq <- length(spdseq)
n.colors.in.range <- n.spd.seq - 1
# create the color map
spd.colors <- colorRampPalette(brewer.pal(min(max(3,
n.colors.in.range),
min(9,
n.colors.in.range)),
palette))(n.colors.in.range)
if (max(data[[spd]],na.rm = TRUE) > spdmax){
spd.breaks <- c(spdseq,
max(data[[spd]],na.rm = TRUE))
spd.labels <- c(paste(c(spdseq[1:n.spd.seq-1]),
'-',
c(spdseq[2:n.spd.seq])),
paste(spdmax,
"-",
max(data[[spd]],na.rm = TRUE)))
spd.colors <- c(spd.colors, "grey50")
} else{
spd.breaks <- spdseq
spd.labels <- paste(c(spdseq[1:n.spd.seq-1]),
'-',
c(spdseq[2:n.spd.seq]))
}
data$spd.binned <- cut(x = data[[spd]],
breaks = spd.breaks,
labels = spd.labels,
ordered_result = TRUE)
# clean up the data
data. <- na.omit(data)
# figure out the wind direction bins
dir.breaks <- c(-dirres/2,
seq(dirres/2, 360-dirres/2, by = dirres),
360+dirres/2)
dir.labels <- c(paste(360-dirres/2,"-",dirres/2),
paste(seq(dirres/2, 360-3*dirres/2, by = dirres),
"-",
seq(3*dirres/2, 360-dirres/2, by = dirres)),
paste(360-dirres/2,"-",dirres/2))
# assign each wind direction to a bin
dir.binned <- cut(data[[dir]],
breaks = dir.breaks,
ordered_result = TRUE)
levels(dir.binned) <- dir.labels
data$dir.binned <- dir.binned
# Run debug if required ----
if (debug>0){
cat(dir.breaks,"\n")
cat(dir.labels,"\n")
cat(levels(dir.binned),"\n")
}
# deal with change in ordering introduced somewhere around version 2.2
if(packageVersion("ggplot2") > "2.2"){
cat("Hadley broke my code\n")
data$spd.binned = with(data, factor(spd.binned, levels = rev(levels(spd.binned))))
spd.colors = rev(spd.colors)
}
# create the plot ----
p.windrose <- ggplot(data = data,
aes(x = dir.binned,
fill = spd.binned)) +
geom_bar() +
scale_x_discrete(drop = FALSE,
labels = waiver()) +
coord_polar(start = -((dirres/2)/360) * 2*pi) +
scale_fill_manual(name = "Wind Speed (m/s)",
values = spd.colors,
drop = FALSE) +
#theme_bw() +
theme(axis.title.x = element_blank(),
#panel.border = element_rect(colour = "blank"),
panel.grid.major = element_line(colour="grey65"))
# adjust axes if required
if (!is.na(countmax)){
p.windrose <- p.windrose +
ylim(c(0,countmax))
}
# print the plot
print(p.windrose)
# return the handle to the wind rose
return(p.windrose)
}
p1 <- plot.windrose(spd = wind.data$speed,
dir = wind.data$dir)
getwd()
library(rWind)
# Загрузка данных о ветре
dt <- seq(ymd_hms(paste(2020,10,1,00,00,00, sep="-")),
ymd_hms(paste(2020,12,21,21,00,00, sep="-")),by="3 hours")
ww <- wind.dl_2(dt,60.0,60.2,29.4,29.7)
wind.data <- tidy (ww)
View(wind.data)
View(wind.data)
p1 <- plot.windrose(spd = wind.data$speed,
dir = wind.data$dir)
View(wind.data)
View(wind.data)
wind.data.head
head(wind.data)
head(wind.data)
head(wind.data)
head(wind.data)
head(wind.data)
head(wind.data)
library(bReeze)
## Not run:
# load example data
data("winddata", package="bReeze")
# create two datasets
set40 <- set(height=40, v.avg=winddata[,2], v.std=winddata[,5],
dir.avg=winddata[,14])
set30 <- set(height=30, v.avg=winddata[,6], v.std=winddata[,9],
dir.avg=winddata[,16])
# format time stamp
ts <- timestamp(timestamp=winddata[,1])
# create met mast object
metmast <- mast(timestamp=ts, set40=set40, set30=set30)
# plot time series of met mast signals
plot(metmast)
# calculate frequency and mean wind speed per wind direction sector
freq <- frequency(mast=metmast, v.set=1)
# plot frequency
plot(freq)
# calculate availability of pairs of wind speed and direction
availability(mast=metmast)
# calculate monthly means of wind speed
month.stats(mast=metmast)
# calculate turbulence intensity
turbulence(mast=metmast, turb.set=1)
# calculate weibull parameters
wb <- weibull(mast=metmast, v.set=1)
# calculate total wind energy content
energy(wb=wb)
# calculate wind profile
pf <- windprofile(mast=metmast, v.set=c(1,2), dir.set=1)
# plot frequency
plot(freq)
View(metmast)
# calculate availability of pairs of wind speed and direction
availability(mast=metmast)
# calculate monthly means of wind speed
month.stats(mast=metmast)
# calculate weibull parameters
wb <- weibull(mast=metmast, v.set=1)
# calculate turbulence intensity
turbulence(mast=metmast, turb.set=1)
# calculate weibull parameters
wb <- weibull(mast=metmast, v.set=1)
# calculate total wind energy content
energy(wb=wb)
# calculate wind profile
pf <- windprofile(mast=metmast, v.set=c(1,2), dir.set=1)
# import power curve
pc <- pc("Enercon_E126_7.5MW.pow")
# calculate annual energy production
aep <- aep(profile=pf, pc=pc, hub.h=135)
# plot AEP
plot(aep)
library(WindCurves)
data(pcurves)
s <- pcurves$Speed
p <- pcurves$`Nordex N90`
da <- data.frame(s,p)
x <- fitcurve(da)
x <- fitcurve(da)
#>
#>    Logistic Function model
#>    -----------------------
#>    P = phi1/(1+exp((phi2-S)/phi3))
#>    where P -> Power and S -> Speed
#>
#>     phi 1 = 2318.242
#>     phi 2 = 8.65861
#>     phi 3 = 1.366053
#>    ===================================
x
#>  [7]  530.79720  884.98933 1303.20985 1686.50765 1964.36723 2133.40810
#> [13] 2225.51236 2272.70005 2296.11389 2307.54694 2313.08606 2315.75946
#> [19] 2317.04738 2317.66729 2317.96554 2318.10900 2318.17801 2318.21119
#> [25] 2318.22715
#>
#> attr(,"row.names")
#>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
#> [24] 24 25
#> attr(,"class")
#> [1] "fitcurve"
validate.curve(x)
#>   Metrics Weibull CDF Logistic Function
#> 1    RMSE  30.8761687        38.8753476
#> 2     MAE  15.1381094        29.3213484
#> 3    MAPE   3.9292946         5.9183795
#> 4      R2   0.9989322         0.9983073
#> 5     COR   0.9995413         0.9991591
plot(x)
x = c(2,3,4,5,10,14,18,20,25,50)
y = c(4.9,16.6,39.2,76.6,613,1682,3575,4904,7458,9578)
plot(x,y)
plot(x,y)
s <- pcurves$Speed
p <- pcurves$`Nordex N90`
da <- data.frame(s,p)
x <- fitcurve(da)
#>
#>    Logistic Function model
#>    -----------------------
#>    P = phi1/(1+exp((phi2-S)/phi3))
#>    where P -> Power and S -> Speed
#>
#>     phi 1 = 2318.242
#>     phi 2 = 8.65861
#>     phi 3 = 1.366053
#>    ===================================
x
#>  [7]  530.79720  884.98933 1303.20985 1686.50765 1964.36723 2133.40810
#> [13] 2225.51236 2272.70005 2296.11389 2307.54694 2313.08606 2315.75946
#> [19] 2317.04738 2317.66729 2317.96554 2318.10900 2318.17801 2318.21119
#> [25] 2318.22715
#>
#> attr(,"row.names")
#>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23
#> [24] 24 25
#> attr(,"class")
#> [1] "fitcurve"
validate.curve(x)
#>   Metrics Weibull CDF Logistic Function
#> 1    RMSE  30.8761687        38.8753476
#> 2     MAE  15.1381094        29.3213484
#> 3    MAPE   3.9292946         5.9183795
#> 4      R2   0.9989322         0.9983073
#> 5     COR   0.9995413         0.9991591
plot(x)
x
View(pcurves)
wind.data
View(pcurves)
View(wind.data)
wind.data$speed_rnd = round(wind.data$speed_rnd,0)
wind.data$speed_rnd = round(wind.data$speed,0)
kotlin = merge(wind.data, pcurves, by.x = 'speed_rnd', by.y = 'Speed')
View(kotlin)
plot(kotlin$`Nordex N90`)
plot(x = kotlin$time, y = kotlin$`Nordex N90`)
plot(x = kotlin$time, y = kotlin$`Nordex N90`, type = 'b')
plot(x = kotlin$time, y = kotlin$`Nordex N90`, type = 'p')
str(kotlin$`Nordex N90`)
summary(kotlin$`Nordex N90`)
describe(kotlin$`Nordex N90`)
install.packages("pastecs")
library(pastecs)
stat.desc(kotlin)
stat.desc(kotlin)
stat.desc(kotlin[,8:14])
View(kotlin)
kotlin[order(kotlin$time),]
kotlin = kotlin[order(kotlin$time),]
plot(x = kotlin$time, y = kotlin$`Nordex N90`, type = 'p')
plot(x = kotlin$time, y = kotlin$`Nordex N90`, type = 'b')
plot(x = kotlin$time, y = kotlin$`Nordex N90`, type = 'b', xlab = 'Период (2020 г.)',ylab = 'Мощность кВт'
)
stat.desc(kotlin[,8:14])
x = c(2,3,4,5,10,14,18,20,25,50)
y = c(4.9,16.6,39.2,76.6,613,1682,3575,4904,7458,9578)
plot(x,y)
plot(pcurves[,c('Speed','Nordex N90')])
# Load wind data by coordinates
dt <- seq(ymd_hms(paste(2020,10,1,00,00,00, sep="-")),
ymd_hms(paste(2020,12,21,21,00,00, sep="-")),by="3 hours")
wind_data_raw <- wind.dl_2(dt,60.0,60.2,29.4,29.7)
getwd()
setwd("C:/Users/dsele/Projects/mfti/physics")
#-----------------------------------------------------------#
source("plot_windrose.R")
#https://cran.r-project.org/web/packages/WindCurves/vignettes/WindCurves_Info.html
data(pcurves)
plot(pcurves[,c('Speed','Nordex N90')])
s <- pcurves$Speed
p <- pcurves$`Nordex N90`
da <- data.frame(s,p)
x <- fitcurve(da)
validate.curve(x)
plot(x)
wind_data$speed_rnd = round(wind.data$speed,0)
wind_data$speed_rnd = round(wind_data$speed,0)
wind_data <- tidy (wind_data_raw)
wind_data$speed_rnd = round(wind_data$speed,0)
kotlin = merge(wind.data, pcurves, by.x = 'speed_rnd', by.y = 'Speed')
kotlin = kotlin[order(kotlin$time),]
plot(x = kotlin$time, y = kotlin$`Nordex N90`, type = 'b', xlab = 'Период (2020 г.)',ylab = 'Мощность кВт')
describe(kotlin$`Nordex N90`)
library(pastecs)
describe(kotlin$`Nordex N90`)
stat.desc(kotlin[,8:14])
x = c(2,3,4,5,10,14,18,20,25,50)
y = c(4.9,16.6,39.2,76.6,613,1682,3575,4904,7458,9578)
plot(x,y)
library(plotly)
df.list <- list(x = 1:100,
y = 500:599,
z = matrix(rnorm(10000), nrow = 100))
df <- data.frame(x = 1:100,
y = 500:599,
z = sample(1:200, size = 100))
# Works fine
plot_ly(df.list, x = x, y = y, z = z, type = "surface")
# Doesn't work
# dimension of the z parameter != dim(x) x dim(y)
plot_ly(df, x = ~x, y = ~y, z = ~z, type = "surface")
df <- data.frame(x = 1:100,
y = 500:599,
z = sample(1:200, size = 100))
# Works fine
plot_ly(df.list, x = x, y = y, z = z, type = "surface")
# Doesn't work
# dimension of the z parameter != dim(x) x dim(y)
plot_ly(df, x = ~x, y = ~y, z = ~z, type = "surface")
install.packages("shiny")
library(shiny)
setwd("C:/Users/dsele/Projects/mfti/physics/font_wind_generator_metrics")
runApp()
runApp()
detach("package:shiny", unload = TRUE)
library(shiny)
detach("package:shiny", unload = TRUE)
library(shiny)
getwd()
runApp()
install.packages("shinythemes")
install.packages("shinythemes")
install.packages("Rtools")
runApp()
